
# 1 "C:\Users\GauravLT\Desktop\AccessControlBy4Users\AccessControlUsingFingerSense-master\AccessControlUsingFingerSense-master\PIC16F877A_R307\main.c"

# 82 "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\include\pic16f877a.h"
volatile unsigned char INDF @ 0x000;



volatile unsigned char TMR0 @ 0x001;



volatile unsigned char PCL @ 0x002;



volatile unsigned char STATUS @ 0x003;

volatile bit CARRY @ ((unsigned)&STATUS*8)+0;
volatile bit DC @ ((unsigned)&STATUS*8)+1;
volatile bit ZERO @ ((unsigned)&STATUS*8)+2;
volatile bit nPD @ ((unsigned)&STATUS*8)+3;
volatile bit nTO @ ((unsigned)&STATUS*8)+4;
volatile bit IRP @ ((unsigned)&STATUS*8)+7;
volatile bit RP0 @ ((unsigned)&STATUS*8)+5;
volatile bit RP1 @ ((unsigned)&STATUS*8)+6;

volatile union {
struct {
unsigned C : 1;
unsigned DC : 1;
unsigned Z : 1;
unsigned nPD : 1;
unsigned nTO : 1;
unsigned RP : 2;
unsigned IRP : 1;
};
struct {
unsigned : 5;
unsigned RP0 : 1;
unsigned RP1 : 1;
};
} STATUSbits @ 0x003;



volatile unsigned char FSR @ 0x004;



volatile unsigned char PORTA @ 0x005;

volatile bit RA0 @ ((unsigned)&PORTA*8)+0;
volatile bit RA1 @ ((unsigned)&PORTA*8)+1;
volatile bit RA2 @ ((unsigned)&PORTA*8)+2;
volatile bit RA3 @ ((unsigned)&PORTA*8)+3;
volatile bit RA4 @ ((unsigned)&PORTA*8)+4;
volatile bit RA5 @ ((unsigned)&PORTA*8)+5;

volatile union {
struct {
unsigned RA0 : 1;
unsigned RA1 : 1;
unsigned RA2 : 1;
unsigned RA3 : 1;
unsigned RA4 : 1;
unsigned RA5 : 1;
};
} PORTAbits @ 0x005;



volatile unsigned char PORTB @ 0x006;

volatile bit RB0 @ ((unsigned)&PORTB*8)+0;
volatile bit RB1 @ ((unsigned)&PORTB*8)+1;
volatile bit RB2 @ ((unsigned)&PORTB*8)+2;
volatile bit RB3 @ ((unsigned)&PORTB*8)+3;
volatile bit RB4 @ ((unsigned)&PORTB*8)+4;
volatile bit RB5 @ ((unsigned)&PORTB*8)+5;
volatile bit RB6 @ ((unsigned)&PORTB*8)+6;
volatile bit RB7 @ ((unsigned)&PORTB*8)+7;

volatile union {
struct {
unsigned RB0 : 1;
unsigned RB1 : 1;
unsigned RB2 : 1;
unsigned RB3 : 1;
unsigned RB4 : 1;
unsigned RB5 : 1;
unsigned RB6 : 1;
unsigned RB7 : 1;
};
} PORTBbits @ 0x006;



volatile unsigned char PORTC @ 0x007;

volatile bit RC0 @ ((unsigned)&PORTC*8)+0;
volatile bit RC1 @ ((unsigned)&PORTC*8)+1;
volatile bit RC2 @ ((unsigned)&PORTC*8)+2;
volatile bit RC3 @ ((unsigned)&PORTC*8)+3;
volatile bit RC4 @ ((unsigned)&PORTC*8)+4;
volatile bit RC5 @ ((unsigned)&PORTC*8)+5;
volatile bit RC6 @ ((unsigned)&PORTC*8)+6;
volatile bit RC7 @ ((unsigned)&PORTC*8)+7;

volatile union {
struct {
unsigned RC0 : 1;
unsigned RC1 : 1;
unsigned RC2 : 1;
unsigned RC3 : 1;
unsigned RC4 : 1;
unsigned RC5 : 1;
unsigned RC6 : 1;
unsigned RC7 : 1;
};
} PORTCbits @ 0x007;



volatile unsigned char PORTD @ 0x008;

volatile bit RD0 @ ((unsigned)&PORTD*8)+0;
volatile bit RD1 @ ((unsigned)&PORTD*8)+1;
volatile bit RD2 @ ((unsigned)&PORTD*8)+2;
volatile bit RD3 @ ((unsigned)&PORTD*8)+3;
volatile bit RD4 @ ((unsigned)&PORTD*8)+4;
volatile bit RD5 @ ((unsigned)&PORTD*8)+5;
volatile bit RD6 @ ((unsigned)&PORTD*8)+6;
volatile bit RD7 @ ((unsigned)&PORTD*8)+7;

volatile union {
struct {
unsigned RD0 : 1;
unsigned RD1 : 1;
unsigned RD2 : 1;
unsigned RD3 : 1;
unsigned RD4 : 1;
unsigned RD5 : 1;
unsigned RD6 : 1;
unsigned RD7 : 1;
};
} PORTDbits @ 0x008;



volatile unsigned char PORTE @ 0x009;

volatile bit RE0 @ ((unsigned)&PORTE*8)+0;
volatile bit RE1 @ ((unsigned)&PORTE*8)+1;
volatile bit RE2 @ ((unsigned)&PORTE*8)+2;

volatile union {
struct {
unsigned RE0 : 1;
unsigned RE1 : 1;
unsigned RE2 : 1;
};
} PORTEbits @ 0x009;



volatile unsigned char PCLATH @ 0x00A;


volatile union {
struct {
unsigned PCLATH : 5;
};
} PCLATHbits @ 0x00A;



volatile unsigned char INTCON @ 0x00B;

volatile bit RBIF @ ((unsigned)&INTCON*8)+0;
volatile bit INTF @ ((unsigned)&INTCON*8)+1;
volatile bit TMR0IF @ ((unsigned)&INTCON*8)+2;
volatile bit RBIE @ ((unsigned)&INTCON*8)+3;
volatile bit INTE @ ((unsigned)&INTCON*8)+4;
volatile bit TMR0IE @ ((unsigned)&INTCON*8)+5;
volatile bit PEIE @ ((unsigned)&INTCON*8)+6;
volatile bit GIE @ ((unsigned)&INTCON*8)+7;
volatile bit T0IF @ ((unsigned)&INTCON*8)+2;
volatile bit T0IE @ ((unsigned)&INTCON*8)+5;

volatile union {
struct {
unsigned RBIF : 1;
unsigned INTF : 1;
unsigned TMR0IF : 1;
unsigned RBIE : 1;
unsigned INTE : 1;
unsigned TMR0IE : 1;
unsigned PEIE : 1;
unsigned GIE : 1;
};
struct {
unsigned : 2;
unsigned T0IF : 1;
unsigned : 2;
unsigned T0IE : 1;
};
} INTCONbits @ 0x00B;



volatile unsigned char PIR1 @ 0x00C;

volatile bit TMR1IF @ ((unsigned)&PIR1*8)+0;
volatile bit TMR2IF @ ((unsigned)&PIR1*8)+1;
volatile bit CCP1IF @ ((unsigned)&PIR1*8)+2;
volatile bit SSPIF @ ((unsigned)&PIR1*8)+3;
volatile bit TXIF @ ((unsigned)&PIR1*8)+4;
volatile bit RCIF @ ((unsigned)&PIR1*8)+5;
volatile bit ADIF @ ((unsigned)&PIR1*8)+6;
volatile bit PSPIF @ ((unsigned)&PIR1*8)+7;

volatile union {
struct {
unsigned TMR1IF : 1;
unsigned TMR2IF : 1;
unsigned CCP1IF : 1;
unsigned SSPIF : 1;
unsigned TXIF : 1;
unsigned RCIF : 1;
unsigned ADIF : 1;
unsigned PSPIF : 1;
};
struct {
unsigned : 1;
unsigned : 1;
unsigned : 1;
unsigned : 1;
unsigned : 2;
unsigned : 1;
unsigned : 1;
};
} PIR1bits @ 0x00C;



volatile unsigned char PIR2 @ 0x00D;

volatile bit CCP2IF @ ((unsigned)&PIR2*8)+0;
volatile bit BCLIF @ ((unsigned)&PIR2*8)+3;
volatile bit EEIF @ ((unsigned)&PIR2*8)+4;
volatile bit CMIF @ ((unsigned)&PIR2*8)+6;

volatile union {
struct {
unsigned CCP2IF : 1;
unsigned : 2;
unsigned BCLIF : 1;
unsigned EEIF : 1;
unsigned : 1;
unsigned CMIF : 1;
};
} PIR2bits @ 0x00D;




volatile unsigned char TMR1L @ 0x00E;



volatile unsigned char TMR1H @ 0x00F;



volatile unsigned int TMR1 @ 0x00E;


volatile unsigned char T1CON @ 0x010;

volatile bit TMR1ON @ ((unsigned)&T1CON*8)+0;
volatile bit TMR1CS @ ((unsigned)&T1CON*8)+1;
volatile bit nT1SYNC @ ((unsigned)&T1CON*8)+2;
volatile bit T1OSCEN @ ((unsigned)&T1CON*8)+3;
volatile bit T1SYNC @ ((unsigned)&T1CON*8)+2;
volatile bit T1CKPS0 @ ((unsigned)&T1CON*8)+4;
volatile bit T1CKPS1 @ ((unsigned)&T1CON*8)+5;
volatile bit T1INSYNC @ ((unsigned)&T1CON*8)+2;

volatile union {
struct {
unsigned TMR1ON : 1;
unsigned TMR1CS : 1;
unsigned nT1SYNC : 1;
unsigned T1OSCEN : 1;
unsigned T1CKPS : 2;
};
struct {
unsigned : 2;
unsigned T1SYNC : 1;
unsigned : 1;
unsigned T1CKPS0 : 1;
unsigned T1CKPS1 : 1;
};
struct {
unsigned : 2;
unsigned T1INSYNC : 1;
};
} T1CONbits @ 0x010;



volatile unsigned char TMR2 @ 0x011;



volatile unsigned char T2CON @ 0x012;

volatile bit TMR2ON @ ((unsigned)&T2CON*8)+2;
volatile bit T2CKPS0 @ ((unsigned)&T2CON*8)+0;
volatile bit T2CKPS1 @ ((unsigned)&T2CON*8)+1;
volatile bit TOUTPS0 @ ((unsigned)&T2CON*8)+3;
volatile bit TOUTPS1 @ ((unsigned)&T2CON*8)+4;
volatile bit TOUTPS2 @ ((unsigned)&T2CON*8)+5;
volatile bit TOUTPS3 @ ((unsigned)&T2CON*8)+6;

volatile union {
struct {
unsigned T2CKPS : 2;
unsigned TMR2ON : 1;
unsigned TOUTPS : 4;
};
struct {
unsigned T2CKPS0 : 1;
unsigned T2CKPS1 : 1;
unsigned : 1;
unsigned TOUTPS0 : 1;
unsigned TOUTPS1 : 1;
unsigned TOUTPS2 : 1;
unsigned TOUTPS3 : 1;
};
} T2CONbits @ 0x012;



volatile unsigned char SSPBUF @ 0x013;



volatile unsigned char SSPCON @ 0x014;

volatile bit CKP @ ((unsigned)&SSPCON*8)+4;
volatile bit SSPEN @ ((unsigned)&SSPCON*8)+5;
volatile bit SSPOV @ ((unsigned)&SSPCON*8)+6;
volatile bit WCOL @ ((unsigned)&SSPCON*8)+7;
volatile bit SSPM0 @ ((unsigned)&SSPCON*8)+0;
volatile bit SSPM1 @ ((unsigned)&SSPCON*8)+1;
volatile bit SSPM2 @ ((unsigned)&SSPCON*8)+2;
volatile bit SSPM3 @ ((unsigned)&SSPCON*8)+3;

volatile union {
struct {
unsigned SSPM : 4;
unsigned CKP : 1;
unsigned SSPEN : 1;
unsigned SSPOV : 1;
unsigned WCOL : 1;
};
struct {
unsigned SSPM0 : 1;
unsigned SSPM1 : 1;
unsigned SSPM2 : 1;
unsigned SSPM3 : 1;
};
} SSPCONbits @ 0x014;




volatile unsigned char CCPR1L @ 0x015;



volatile unsigned char CCPR1H @ 0x016;



volatile unsigned int CCPR1 @ 0x015;


volatile unsigned char CCP1CON @ 0x017;

volatile bit CCP1Y @ ((unsigned)&CCP1CON*8)+4;
volatile bit CCP1X @ ((unsigned)&CCP1CON*8)+5;
volatile bit CCP1M0 @ ((unsigned)&CCP1CON*8)+0;
volatile bit CCP1M1 @ ((unsigned)&CCP1CON*8)+1;
volatile bit CCP1M2 @ ((unsigned)&CCP1CON*8)+2;
volatile bit CCP1M3 @ ((unsigned)&CCP1CON*8)+3;

volatile union {
struct {
unsigned CCP1M : 4;
unsigned CCP1Y : 1;
unsigned CCP1X : 1;
};
struct {
unsigned CCP1M0 : 1;
unsigned CCP1M1 : 1;
unsigned CCP1M2 : 1;
unsigned CCP1M3 : 1;
};
} CCP1CONbits @ 0x017;



volatile unsigned char RCSTA @ 0x018;

volatile bit RX9D @ ((unsigned)&RCSTA*8)+0;
volatile bit OERR @ ((unsigned)&RCSTA*8)+1;
volatile bit FERR @ ((unsigned)&RCSTA*8)+2;
volatile bit ADDEN @ ((unsigned)&RCSTA*8)+3;
volatile bit CREN @ ((unsigned)&RCSTA*8)+4;
volatile bit SREN @ ((unsigned)&RCSTA*8)+5;
volatile bit RX9 @ ((unsigned)&RCSTA*8)+6;
volatile bit SPEN @ ((unsigned)&RCSTA*8)+7;
volatile bit RCD8 @ ((unsigned)&RCSTA*8)+0;
volatile bit RC9 @ ((unsigned)&RCSTA*8)+6;
volatile bit nRC8 @ ((unsigned)&RCSTA*8)+6;
volatile bit RC8_9 @ ((unsigned)&RCSTA*8)+6;

volatile union {
struct {
unsigned RX9D : 1;
unsigned OERR : 1;
unsigned FERR : 1;
unsigned ADDEN : 1;
unsigned CREN : 1;
unsigned SREN : 1;
unsigned RX9 : 1;
unsigned SPEN : 1;
};
struct {
unsigned RCD8 : 1;
unsigned : 5;
unsigned RC9 : 1;
};
struct {
unsigned : 6;
unsigned nRC8 : 1;
};
struct {
unsigned : 6;
unsigned RC8_9 : 1;
};
} RCSTAbits @ 0x018;



volatile unsigned char TXREG @ 0x019;



volatile unsigned char RCREG @ 0x01A;




volatile unsigned char CCPR2L @ 0x01B;



volatile unsigned char CCPR2H @ 0x01C;



volatile unsigned int CCPR2 @ 0x01B;


volatile unsigned char CCP2CON @ 0x01D;

volatile bit CCP2Y @ ((unsigned)&CCP2CON*8)+4;
volatile bit CCP2X @ ((unsigned)&CCP2CON*8)+5;
volatile bit CCP2M0 @ ((unsigned)&CCP2CON*8)+0;
volatile bit CCP2M1 @ ((unsigned)&CCP2CON*8)+1;
volatile bit CCP2M2 @ ((unsigned)&CCP2CON*8)+2;
volatile bit CCP2M3 @ ((unsigned)&CCP2CON*8)+3;

volatile union {
struct {
unsigned CCP2M : 4;
unsigned CCP2Y : 1;
unsigned CCP2X : 1;
};
struct {
unsigned CCP2M0 : 1;
unsigned CCP2M1 : 1;
unsigned CCP2M2 : 1;
unsigned CCP2M3 : 1;
};
} CCP2CONbits @ 0x01D;



volatile unsigned char ADRESH @ 0x01E;



volatile unsigned char ADCON0 @ 0x01F;

volatile bit ADON @ ((unsigned)&ADCON0*8)+0;
volatile bit GO_nDONE @ ((unsigned)&ADCON0*8)+2;
volatile bit GO @ ((unsigned)&ADCON0*8)+2;
volatile bit CHS0 @ ((unsigned)&ADCON0*8)+3;
volatile bit CHS1 @ ((unsigned)&ADCON0*8)+4;
volatile bit CHS2 @ ((unsigned)&ADCON0*8)+5;
volatile bit ADCS0 @ ((unsigned)&ADCON0*8)+6;
volatile bit ADCS1 @ ((unsigned)&ADCON0*8)+7;
volatile bit nDONE @ ((unsigned)&ADCON0*8)+2;
volatile bit GO_DONE @ ((unsigned)&ADCON0*8)+2;

volatile union {
struct {
unsigned ADON : 1;
unsigned : 1;
unsigned GO_nDONE : 1;
unsigned CHS : 3;
unsigned ADCS : 2;
};
struct {
unsigned : 1;
unsigned : 1;
unsigned : 1;
unsigned : 3;
unsigned : 2;
};
struct {
unsigned : 2;
unsigned GO : 1;
unsigned CHS0 : 1;
unsigned CHS1 : 1;
unsigned CHS2 : 1;
unsigned ADCS0 : 1;
unsigned ADCS1 : 1;
};
struct {
unsigned : 2;
unsigned nDONE : 1;
};
struct {
unsigned : 2;
unsigned GO_DONE : 1;
};
} ADCON0bits @ 0x01F;

# 639
volatile unsigned char OPTION_REG @ 0x081;

volatile bit PSA @ ((unsigned)&OPTION_REG*8)+3;
volatile bit T0SE @ ((unsigned)&OPTION_REG*8)+4;
volatile bit T0CS @ ((unsigned)&OPTION_REG*8)+5;
volatile bit INTEDG @ ((unsigned)&OPTION_REG*8)+6;
volatile bit nRBPU @ ((unsigned)&OPTION_REG*8)+7;
volatile bit PS0 @ ((unsigned)&OPTION_REG*8)+0;
volatile bit PS1 @ ((unsigned)&OPTION_REG*8)+1;
volatile bit PS2 @ ((unsigned)&OPTION_REG*8)+2;

volatile union {
struct {
unsigned PS : 3;
unsigned PSA : 1;
unsigned T0SE : 1;
unsigned T0CS : 1;
unsigned INTEDG : 1;
unsigned nRBPU : 1;
};
struct {
unsigned PS0 : 1;
unsigned PS1 : 1;
unsigned PS2 : 1;
};
} OPTION_REGbits @ 0x081;



volatile unsigned char TRISA @ 0x085;

volatile bit TRISA0 @ ((unsigned)&TRISA*8)+0;
volatile bit TRISA1 @ ((unsigned)&TRISA*8)+1;
volatile bit TRISA2 @ ((unsigned)&TRISA*8)+2;
volatile bit TRISA3 @ ((unsigned)&TRISA*8)+3;
volatile bit TRISA4 @ ((unsigned)&TRISA*8)+4;
volatile bit TRISA5 @ ((unsigned)&TRISA*8)+5;

volatile union {
struct {
unsigned TRISA0 : 1;
unsigned TRISA1 : 1;
unsigned TRISA2 : 1;
unsigned TRISA3 : 1;
unsigned TRISA4 : 1;
unsigned TRISA5 : 1;
};
} TRISAbits @ 0x085;



volatile unsigned char TRISB @ 0x086;

volatile bit TRISB0 @ ((unsigned)&TRISB*8)+0;
volatile bit TRISB1 @ ((unsigned)&TRISB*8)+1;
volatile bit TRISB2 @ ((unsigned)&TRISB*8)+2;
volatile bit TRISB3 @ ((unsigned)&TRISB*8)+3;
volatile bit TRISB4 @ ((unsigned)&TRISB*8)+4;
volatile bit TRISB5 @ ((unsigned)&TRISB*8)+5;
volatile bit TRISB6 @ ((unsigned)&TRISB*8)+6;
volatile bit TRISB7 @ ((unsigned)&TRISB*8)+7;

volatile union {
struct {
unsigned TRISB0 : 1;
unsigned TRISB1 : 1;
unsigned TRISB2 : 1;
unsigned TRISB3 : 1;
unsigned TRISB4 : 1;
unsigned TRISB5 : 1;
unsigned TRISB6 : 1;
unsigned TRISB7 : 1;
};
} TRISBbits @ 0x086;



volatile unsigned char TRISC @ 0x087;

volatile bit TRISC0 @ ((unsigned)&TRISC*8)+0;
volatile bit TRISC1 @ ((unsigned)&TRISC*8)+1;
volatile bit TRISC2 @ ((unsigned)&TRISC*8)+2;
volatile bit TRISC3 @ ((unsigned)&TRISC*8)+3;
volatile bit TRISC4 @ ((unsigned)&TRISC*8)+4;
volatile bit TRISC5 @ ((unsigned)&TRISC*8)+5;
volatile bit TRISC6 @ ((unsigned)&TRISC*8)+6;
volatile bit TRISC7 @ ((unsigned)&TRISC*8)+7;

volatile union {
struct {
unsigned TRISC0 : 1;
unsigned TRISC1 : 1;
unsigned TRISC2 : 1;
unsigned TRISC3 : 1;
unsigned TRISC4 : 1;
unsigned TRISC5 : 1;
unsigned TRISC6 : 1;
unsigned TRISC7 : 1;
};
} TRISCbits @ 0x087;



volatile unsigned char TRISD @ 0x088;

volatile bit TRISD0 @ ((unsigned)&TRISD*8)+0;
volatile bit TRISD1 @ ((unsigned)&TRISD*8)+1;
volatile bit TRISD2 @ ((unsigned)&TRISD*8)+2;
volatile bit TRISD3 @ ((unsigned)&TRISD*8)+3;
volatile bit TRISD4 @ ((unsigned)&TRISD*8)+4;
volatile bit TRISD5 @ ((unsigned)&TRISD*8)+5;
volatile bit TRISD6 @ ((unsigned)&TRISD*8)+6;
volatile bit TRISD7 @ ((unsigned)&TRISD*8)+7;

volatile union {
struct {
unsigned TRISD0 : 1;
unsigned TRISD1 : 1;
unsigned TRISD2 : 1;
unsigned TRISD3 : 1;
unsigned TRISD4 : 1;
unsigned TRISD5 : 1;
unsigned TRISD6 : 1;
unsigned TRISD7 : 1;
};
} TRISDbits @ 0x088;



volatile unsigned char TRISE @ 0x089;

volatile bit TRISE0 @ ((unsigned)&TRISE*8)+0;
volatile bit TRISE1 @ ((unsigned)&TRISE*8)+1;
volatile bit TRISE2 @ ((unsigned)&TRISE*8)+2;
volatile bit PSPMODE @ ((unsigned)&TRISE*8)+4;
volatile bit IBOV @ ((unsigned)&TRISE*8)+5;
volatile bit OBF @ ((unsigned)&TRISE*8)+6;
volatile bit IBF @ ((unsigned)&TRISE*8)+7;

volatile union {
struct {
unsigned TRISE0 : 1;
unsigned TRISE1 : 1;
unsigned TRISE2 : 1;
unsigned : 1;
unsigned PSPMODE : 1;
unsigned IBOV : 1;
unsigned OBF : 1;
unsigned IBF : 1;
};
} TRISEbits @ 0x089;



volatile unsigned char PIE1 @ 0x08C;

volatile bit TMR1IE @ ((unsigned)&PIE1*8)+0;
volatile bit TMR2IE @ ((unsigned)&PIE1*8)+1;
volatile bit CCP1IE @ ((unsigned)&PIE1*8)+2;
volatile bit SSPIE @ ((unsigned)&PIE1*8)+3;
volatile bit TXIE @ ((unsigned)&PIE1*8)+4;
volatile bit RCIE @ ((unsigned)&PIE1*8)+5;
volatile bit ADIE @ ((unsigned)&PIE1*8)+6;
volatile bit PSPIE @ ((unsigned)&PIE1*8)+7;

volatile union {
struct {
unsigned TMR1IE : 1;
unsigned TMR2IE : 1;
unsigned CCP1IE : 1;
unsigned SSPIE : 1;
unsigned TXIE : 1;
unsigned RCIE : 1;
unsigned ADIE : 1;
unsigned PSPIE : 1;
};
} PIE1bits @ 0x08C;



volatile unsigned char PIE2 @ 0x08D;

volatile bit CCP2IE @ ((unsigned)&PIE2*8)+0;
volatile bit BCLIE @ ((unsigned)&PIE2*8)+3;
volatile bit EEIE @ ((unsigned)&PIE2*8)+4;
volatile bit CMIE @ ((unsigned)&PIE2*8)+6;

volatile union {
struct {
unsigned CCP2IE : 1;
unsigned : 2;
unsigned BCLIE : 1;
unsigned EEIE : 1;
unsigned : 1;
unsigned CMIE : 1;
};
} PIE2bits @ 0x08D;



volatile unsigned char PCON @ 0x08E;

volatile bit nBOR @ ((unsigned)&PCON*8)+0;
volatile bit nPOR @ ((unsigned)&PCON*8)+1;
volatile bit nBO @ ((unsigned)&PCON*8)+0;

volatile union {
struct {
unsigned nBOR : 1;
unsigned nPOR : 1;
};
struct {
unsigned nBO : 1;
};
} PCONbits @ 0x08E;



volatile unsigned char SSPCON2 @ 0x091;

volatile bit SEN @ ((unsigned)&SSPCON2*8)+0;
volatile bit RSEN @ ((unsigned)&SSPCON2*8)+1;
volatile bit PEN @ ((unsigned)&SSPCON2*8)+2;
volatile bit RCEN @ ((unsigned)&SSPCON2*8)+3;
volatile bit ACKEN @ ((unsigned)&SSPCON2*8)+4;
volatile bit ACKDT @ ((unsigned)&SSPCON2*8)+5;
volatile bit ACKSTAT @ ((unsigned)&SSPCON2*8)+6;
volatile bit GCEN @ ((unsigned)&SSPCON2*8)+7;

volatile union {
struct {
unsigned SEN : 1;
unsigned RSEN : 1;
unsigned PEN : 1;
unsigned RCEN : 1;
unsigned ACKEN : 1;
unsigned ACKDT : 1;
unsigned ACKSTAT : 1;
unsigned GCEN : 1;
};
} SSPCON2bits @ 0x091;



volatile unsigned char PR2 @ 0x092;



volatile unsigned char SSPADD @ 0x093;



volatile unsigned char SSPSTAT @ 0x094;

volatile bit BF @ ((unsigned)&SSPSTAT*8)+0;
volatile bit UA @ ((unsigned)&SSPSTAT*8)+1;
volatile bit R_nW @ ((unsigned)&SSPSTAT*8)+2;
volatile bit S @ ((unsigned)&SSPSTAT*8)+3;
volatile bit P @ ((unsigned)&SSPSTAT*8)+4;
volatile bit D_nA @ ((unsigned)&SSPSTAT*8)+5;
volatile bit CKE @ ((unsigned)&SSPSTAT*8)+6;
volatile bit SMP @ ((unsigned)&SSPSTAT*8)+7;
volatile bit R @ ((unsigned)&SSPSTAT*8)+2;
volatile bit D @ ((unsigned)&SSPSTAT*8)+5;
volatile bit I2C_READ @ ((unsigned)&SSPSTAT*8)+2;
volatile bit I2C_START @ ((unsigned)&SSPSTAT*8)+3;
volatile bit I2C_STOP @ ((unsigned)&SSPSTAT*8)+4;
volatile bit I2C_DATA @ ((unsigned)&SSPSTAT*8)+5;
volatile bit nW @ ((unsigned)&SSPSTAT*8)+2;
volatile bit nA @ ((unsigned)&SSPSTAT*8)+5;
volatile bit nWRITE @ ((unsigned)&SSPSTAT*8)+2;
volatile bit nADDRESS @ ((unsigned)&SSPSTAT*8)+5;
volatile bit R_W @ ((unsigned)&SSPSTAT*8)+2;
volatile bit D_A @ ((unsigned)&SSPSTAT*8)+5;
volatile bit READ_WRITE @ ((unsigned)&SSPSTAT*8)+2;
volatile bit DATA_ADDRESS @ ((unsigned)&SSPSTAT*8)+5;

volatile union {
struct {
unsigned BF : 1;
unsigned UA : 1;
unsigned R_nW : 1;
unsigned S : 1;
unsigned P : 1;
unsigned D_nA : 1;
unsigned CKE : 1;
unsigned SMP : 1;
};
struct {
unsigned : 1;
unsigned : 1;
unsigned : 1;
unsigned : 1;
unsigned : 1;
unsigned : 1;
unsigned : 1;
unsigned : 1;
};
struct {
unsigned : 2;
unsigned R : 1;
unsigned : 2;
unsigned D : 1;
};
struct {
unsigned : 2;
unsigned I2C_READ : 1;
unsigned I2C_START : 1;
unsigned I2C_STOP : 1;
unsigned I2C_DATA : 1;
};
struct {
unsigned : 2;
unsigned nW : 1;
unsigned : 2;
unsigned nA : 1;
};
struct {
unsigned : 2;
unsigned nWRITE : 1;
unsigned : 2;
unsigned nADDRESS : 1;
};
struct {
unsigned : 2;
unsigned R_W : 1;
unsigned : 2;
unsigned D_A : 1;
};
struct {
unsigned : 2;
unsigned READ_WRITE : 1;
unsigned : 2;
unsigned DATA_ADDRESS : 1;
};
} SSPSTATbits @ 0x094;



volatile unsigned char TXSTA @ 0x098;

volatile bit TX9D @ ((unsigned)&TXSTA*8)+0;
volatile bit TRMT @ ((unsigned)&TXSTA*8)+1;
volatile bit BRGH @ ((unsigned)&TXSTA*8)+2;
volatile bit SYNC @ ((unsigned)&TXSTA*8)+4;
volatile bit TXEN @ ((unsigned)&TXSTA*8)+5;
volatile bit TX9 @ ((unsigned)&TXSTA*8)+6;
volatile bit CSRC @ ((unsigned)&TXSTA*8)+7;
volatile bit TXD8 @ ((unsigned)&TXSTA*8)+0;
volatile bit nTX8 @ ((unsigned)&TXSTA*8)+6;
volatile bit TX8_9 @ ((unsigned)&TXSTA*8)+6;

volatile union {
struct {
unsigned TX9D : 1;
unsigned TRMT : 1;
unsigned BRGH : 1;
unsigned : 1;
unsigned SYNC : 1;
unsigned TXEN : 1;
unsigned TX9 : 1;
unsigned CSRC : 1;
};
struct {
unsigned TXD8 : 1;
unsigned : 5;
unsigned nTX8 : 1;
};
struct {
unsigned : 6;
unsigned TX8_9 : 1;
};
} TXSTAbits @ 0x098;



volatile unsigned char SPBRG @ 0x099;



volatile unsigned char CMCON @ 0x09C;

volatile bit CIS @ ((unsigned)&CMCON*8)+3;
volatile bit C1INV @ ((unsigned)&CMCON*8)+4;
volatile bit C2INV @ ((unsigned)&CMCON*8)+5;
volatile bit C1OUT @ ((unsigned)&CMCON*8)+6;
volatile bit C2OUT @ ((unsigned)&CMCON*8)+7;
volatile bit CM0 @ ((unsigned)&CMCON*8)+0;
volatile bit CM1 @ ((unsigned)&CMCON*8)+1;
volatile bit CM2 @ ((unsigned)&CMCON*8)+2;

volatile union {
struct {
unsigned CM : 3;
unsigned CIS : 1;
unsigned C1INV : 1;
unsigned C2INV : 1;
unsigned C1OUT : 1;
unsigned C2OUT : 1;
};
struct {
unsigned CM0 : 1;
unsigned CM1 : 1;
unsigned CM2 : 1;
};
} CMCONbits @ 0x09C;



volatile unsigned char CVRCON @ 0x09D;

volatile bit CVRR @ ((unsigned)&CVRCON*8)+5;
volatile bit CVROE @ ((unsigned)&CVRCON*8)+6;
volatile bit CVREN @ ((unsigned)&CVRCON*8)+7;
volatile bit CVR0 @ ((unsigned)&CVRCON*8)+0;
volatile bit CVR1 @ ((unsigned)&CVRCON*8)+1;
volatile bit CVR2 @ ((unsigned)&CVRCON*8)+2;
volatile bit CVR3 @ ((unsigned)&CVRCON*8)+3;

volatile union {
struct {
unsigned CVR : 4;
unsigned : 1;
unsigned CVRR : 1;
unsigned CVROE : 1;
unsigned CVREN : 1;
};
struct {
unsigned CVR0 : 1;
unsigned CVR1 : 1;
unsigned CVR2 : 1;
unsigned CVR3 : 1;
};
} CVRCONbits @ 0x09D;



volatile unsigned char ADRESL @ 0x09E;



volatile unsigned char ADCON1 @ 0x09F;

volatile bit ADCS2 @ ((unsigned)&ADCON1*8)+6;
volatile bit ADFM @ ((unsigned)&ADCON1*8)+7;
volatile bit PCFG0 @ ((unsigned)&ADCON1*8)+0;
volatile bit PCFG1 @ ((unsigned)&ADCON1*8)+1;
volatile bit PCFG2 @ ((unsigned)&ADCON1*8)+2;
volatile bit PCFG3 @ ((unsigned)&ADCON1*8)+3;

volatile union {
struct {
unsigned PCFG : 4;
unsigned : 2;
unsigned ADCS2 : 1;
unsigned ADFM : 1;
};
struct {
unsigned PCFG0 : 1;
unsigned PCFG1 : 1;
unsigned PCFG2 : 1;
unsigned PCFG3 : 1;
};
} ADCON1bits @ 0x09F;

# 1111
volatile unsigned char EEDATA @ 0x10C;



volatile unsigned char EEADR @ 0x10D;



volatile unsigned char EEDATH @ 0x10E;


volatile union {
struct {
unsigned : 6;
};
} EEDATHbits @ 0x10E;



volatile unsigned char EEADRH @ 0x10F;


volatile union {
struct {
unsigned : 5;
};
} EEADRHbits @ 0x10F;

# 1146
volatile unsigned char EECON1 @ 0x18C;

volatile bit RD @ ((unsigned)&EECON1*8)+0;
volatile bit WR @ ((unsigned)&EECON1*8)+1;
volatile bit WREN @ ((unsigned)&EECON1*8)+2;
volatile bit WRERR @ ((unsigned)&EECON1*8)+3;
volatile bit EEPGD @ ((unsigned)&EECON1*8)+7;

volatile union {
struct {
unsigned RD : 1;
unsigned WR : 1;
unsigned WREN : 1;
unsigned WRERR : 1;
unsigned : 3;
unsigned EEPGD : 1;
};
} EECON1bits @ 0x18C;



volatile unsigned char EECON2 @ 0x18D;


# 27 "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\include\pic.h"
#pragma inline(_nop)
extern void _nop(void);

# 80
extern unsigned int flash_read(unsigned short addr);

# 41 "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\include\eeprom_routines.h"
extern unsigned char eeprom_write(unsigned char addr, unsigned char value);
extern unsigned char eeprom_read(unsigned char addr);
extern void eecpymem(volatile unsigned char *to, eeprom unsigned char *from, unsigned char size);
extern void memcpyee(eeprom unsigned char *to, const unsigned char *from, unsigned char size);


# 153 "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\include\pic.h"
#pragma inline(_delay)
extern void _delay(unsigned long);

# 12 "C:\Users\GauravLT\Desktop\AccessControlBy4Users\AccessControlUsingFingerSense-master\AccessControlUsingFingerSense-master\PIC16F877A_R307\lcd.h"
enum ByteMode
{
Cmd=0,
Data=1
};

void LcdInit();
void LcdDelay(unsigned int d);
void SendByte(enum ByteMode Mode, unsigned char data);
void UploadLcdBuffer();
void LcdClear();
void LcdPrint(const unsigned char *s, unsigned char rowNo, unsigned char colNo);
void LcdByte(unsigned char b, unsigned char rowNo, unsigned char colNo);

# 5 "C:\Users\GauravLT\Desktop\AccessControlBy4Users\AccessControlUsingFingerSense-master\AccessControlUsingFingerSense-master\PIC16F877A_R307\keypd.h"
extern unsigned int buzzOffCounter;
unsigned char IsKeyPending();
void PutKey(unsigned char key);
unsigned char GetKey();
void KeyScan();

# 9 "C:\Users\GauravLT\Desktop\AccessControlBy4Users\AccessControlUsingFingerSense-master\AccessControlUsingFingerSense-master\PIC16F877A_R307\FingerPrintSensor_R307.h"
enum InstructionCode
{
GenImg = 0x01,
Img2Tz = 0x02,
Match = 0x03,
Search = 0x04,
RegModel = 0x05,
Store = 0x06,
LoadChar = 0x07,
UpChar = 0x08,
DownChar = 0x09,
UpImage = 0x0A,
DownImage = 0x0B,
DeleteChar = 0x0C,
Empty = 0x0D,
SetSysParam = 0x0E,
ReadSysParam = 0x0F,
SetPwd = 0x12,
VfyPwd = 0x13,
GetRandomCode = 0x14,
SetAddr = 0x15,
Control = 0x17,
WriteNotepad = 0x18,
ReadNotepad = 0x19,
HiSpeedSearch = 0x1B,
TemplateNum = 0x1D

};
enum PackageIdentifier
{
pCmd = 0x01,
pData = 0x02,
pAck = 0x07,
pEOP = 0x08
};

struct Package
{
unsigned int Header;
unsigned long Address;
enum PackageIdentifier Identifier;
unsigned int Length;
enum InstructionCode Instruction;
unsigned char *Content;
unsigned int CheckSum;
};

struct Response0
{
unsigned int Header;
unsigned long Address;
enum PackageIdentifier Identifier;
unsigned int Length;
unsigned char ConfirmationCode;
}
struct Response
{
struct Response0 _Response0;

unsigned int CheckSum0;
};

void UartInit();
void SendUartByte(unsigned char val);
void SendUartValue(unsigned long value, unsigned char size);
void SendUartString(unsigned char *s);
void ClearUartBuffer();
unsigned char IsUartBytePending();
void PutUartByte(unsigned char val);
unsigned char GetUartByte();
void sendPackage(enum PackageIdentifier identifier, unsigned char length, enum InstructionCode instruction, unsigned char *content);
unsigned long ToggleEndianFormat(unsigned long val, unsigned char size);
unsigned char FillUpResponse(unsigned char *data, unsigned char *confirmationCode);
unsigned char DeleteUser(unsigned char UserNo);
unsigned char VerifyPswd();
unsigned char ScanForImage();
unsigned char GenCharacterFileFromImage();
unsigned char LoadFingerTemplate(unsigned int position);
unsigned char MatchTemplate();
unsigned char HiSpeedScan0(unsigned char *UserNo);
unsigned char HiSpeedScan(unsigned char *UserNo);
unsigned char EraseAllUsers();
unsigned char CheckUser(unsigned int position);
unsigned char AddUserA();
unsigned char AddUserB();
unsigned char AddUserC(unsigned char position);
unsigned char AddNewUser(unsigned char position);

# 8 "C:\Users\GauravLT\Desktop\AccessControlBy4Users\AccessControlUsingFingerSense-master\AccessControlUsingFingerSense-master\PIC16F877A_R307\eeprom.h"
void ee_write(unsigned char a,unsigned char d);
unsigned char ee_read(unsigned char a);
void Delay(unsigned int d);
void memcpy1(unsigned char *toStr, unsigned char *fromStr, unsigned char len);
void memset1(unsigned char *str, unsigned char data, unsigned int len);
unsigned char TotDigits(unsigned long val);
void DecToStr(unsigned long val, unsigned char *dest, unsigned char minDigit);
void ee_eraseNPos(unsigned char n);
signed char getNextAvailLocation();
void reserveEElocation(unsigned char loc);
void releaseEElocation(unsigned char loc);

# 8 "C:\Users\GauravLT\Desktop\AccessControlBy4Users\AccessControlUsingFingerSense-master\AccessControlUsingFingerSense-master\PIC16F877A_R307\main.c"
asm("\tpsect config,class=CONFIG,delta=2"); asm("\tdw ""0x3F3A");

# 17
const unsigned char UserNoArr[][3]={
"A \0", "B \0", "C \0",
"D \0", "E \0", "F \0",
"G \0", "H \0", "I \0",
"J \0", "K \0", "L \0"
};

# 33
unsigned char EraseAllUsersAfterAdminConfirm()
{
unsigned char isEraseAllUsers=1;
if(ee_read(0x00) == 0x01)
{
LcdClear();
LcdPrint("Admin Required\nPlace Finger",0,0);
isEraseAllUsers = 0;

unsigned char UserNo;
unsigned char result = HiSpeedScan0(&UserNo);
if(result == 0xFF) return 0;
else
{
if(result == 1 && (UserNo == 0 || UserNo == 1))
{
LcdClear();
LcdPrint("Admin found",0,0);
Delay(2);
isEraseAllUsers = 1;
}
else
{
LcdClear();
LcdPrint("Admin Not\n  found",0,0);
Delay(2);
return 0;
}
}
}
if(isEraseAllUsers == 1)
{
EraseAllUsers();
ee_eraseNPos(12);
ee_write(30,0x00);

LcdClear();
LcdPrint("All Users\n Deleted",0,0);
Delay(2);
}
return 0;
}

unsigned char ControlAccess()
{
unsigned char UserNo=0;
unsigned char result=0;
unsigned char SelectedUserArr[4];
unsigned char SwitchRelay=1;

RB5=0;
LcdClear();
LcdPrint("Place Finger", 0,0);
memset1(SelectedUserArr, 0xFF, sizeof(SelectedUserArr));
while(1)
{
result=HiSpeedScan0(&UserNo);

if(result == 0xFF) break;
else if(result == 0x01)
{
if(UserNo>=0 && UserNo<14)
{
if(UserNo>=2 && UserNo<14)
{
unsigned char c =0;
UserNo = UserNo - 2;
c = UserNo/3;
SwitchRelay = 0;
SelectedUserArr[c] = UserNo;

if(SelectedUserArr[c]!=0xFF) LcdPrint(&UserNoArr[SelectedUserArr[c]][0], 1,3+c*3);
if(SelectedUserArr[0] != 0xFF && SelectedUserArr[1] != 0xFF &&
SelectedUserArr[2] != 0xFF && SelectedUserArr[3] != 0xFF)
{
SwitchRelay = 1;
}
}
if(SwitchRelay == 1)
{
RB1 = 1;
Delay(3);
RB1 = 0;
return;
}
Delay(3);
}
}
else if(result == 0x00)
{


RB5=1;
Delay(1);

RB5=0;

}
}
return 0;
}


unsigned char AlterAdminUser(unsigned char UserIndex)
{
unsigned char Create0thPositionUser=1;

if(ee_read(UserIndex-'1') == 0x01)
{
LcdClear();
LcdPrint("Admin Required\nPlace Finger",0,0);
Create0thPositionUser = 0;

unsigned char UserNo;
unsigned char result = HiSpeedScan0(&UserNo);
if(result == 0xFF) return 0;
else
{
if(result == 1 && (UserNo == UserIndex - '1') )
{
LcdClear();
LcdPrint("Admin found",0,0);
Delay(2);
if(DeleteUser(UserIndex-'1') == 1)
{
LcdClear();
LcdPrint("Admin Deleted",0,0);
Delay(1);
Create0thPositionUser = 1;
}
else
{
LcdClear();
LcdPrint("Can't Delete\n Admin",0,0);
Delay(2);
return 0;
}
}
else
{
LcdClear();
LcdPrint("Admin Not\n  found",0,0);
Delay(2);
return 0;
}
}
}
if(Create0thPositionUser == 1)
{
LcdClear();
LcdPrint("Plz Register\n new Admin",0,0);
Delay(2);
LcdClear();
LcdPrint("Place Finger",0,0);
Delay(2);
unsigned char NewUserResult = AddNewUser(UserIndex-'1');
if(NewUserResult == 1)
{
LcdClear();
LcdPrint("Admin \n  Registered",0,0);
Delay(2);
}
else if(NewUserResult == 0xFF) return 0;
else
{
LcdClear();
LcdPrint("Error In\n  Registeration",0,0);
Delay(2);
}

}
return 0;
}


unsigned char AddNewUserAfterAdminConfirm()
{
unsigned char isAddNewUser=1,UserNo,result,key;
unsigned char buff[5];
signed char _availSpaceResult = -1;

if(ee_read(0x00) == 0x01)
{
LcdClear();
LcdPrint("Admin Required\nPlace Finger",0,0);
isAddNewUser = 0;

result = HiSpeedScan0(&UserNo);
if(result == 0xFF) return 0;
else
{
if(result == 1 && (UserNo == 0 || UserNo == 1))
{
LcdClear();
LcdPrint("Admin found",0,0);
Delay(2);
isAddNewUser = 1;
}
else
{
LcdClear();
LcdPrint("Admin Not\n  found",0,0);
Delay(2);
return 0;
}
}
}
if(isAddNewUser == 1)
{
LcdClear();
_availSpaceResult = -1;
LcdPrint("Select User", 0, 0);

PutKey('1');
while(1)
{
KeyScan();
if(IsKeyPending())
{
key = GetKey();
if(key == '1'){ if(_availSpaceResult<12-1) _availSpaceResult++; }
else if(key == '2') {if(_availSpaceResult > 0) _availSpaceResult--; }
else if(key == '3') return 0;
else if(key == '4') break;

buff[0]=UserNoArr[_availSpaceResult][0];
buff[1]=UserNoArr[_availSpaceResult][1];
buff[2]=0;
LcdPrint(buff, 1, 2);
}
}

if(_availSpaceResult == -1)
{
LcdClear();
LcdPrint("Invalid\n Selection",0,0);
Delay(2);
}
else if(_availSpaceResult >= 0 && _availSpaceResult < 12)
{
_availSpaceResult += 2;
LcdClear();
LcdPrint("New User\nPlace Finger",0,0);
unsigned char availSpaceResult = _availSpaceResult;
unsigned char AddNewUserResult = AddNewUser(availSpaceResult);
if(AddNewUserResult == 1)
{
unsigned char buff[10];
LcdClear();
LcdPrint("New User\n Created @:",0,0);
DecToStr(availSpaceResult, buff, 2);
LcdPrint(buff, 1, 12);
Delay(2);
}
else if(AddNewUserResult == 0xFF) return 0;
else
{
LcdClear();
LcdPrint("Error In\n User Creation",0,0);
Delay(2);
}
}
else
{
LcdClear();
LcdPrint("Index Out\n of bound",0,0);
Delay(2);
}
}
return 0;
}


unsigned char DeleteUserAfterAdminConfirm()
{
unsigned char isDeleteUser=1,UserNo,result;
unsigned char buff[10];
signed char DelUserNo ;

if(ee_read(0x00) == 0x01)
{
LcdClear();
LcdPrint("Admin Required\nPlace Finger",0,0);
isDeleteUser = 0;

result = HiSpeedScan0(&UserNo);
if(result == 0xFF) return 0;
else
{
if(result == 1 && (UserNo == 0 || UserNo == 1))
{
LcdClear();
LcdPrint("Admin found",0,0);
Delay(2);

DelUserNo = -1;
LcdClear();
LcdPrint("Select User",0,0);
PutKey('1');
while(1)
{
KeyScan();
if(IsKeyPending())
{
unsigned char key = GetKey();
if(key == '1'){ if(DelUserNo<12-1) DelUserNo++; }
else if(key == '2') {if(DelUserNo > 0) DelUserNo--; }
else if(key == '3') return 0;
else if(key == '4') break;

buff[0]=UserNoArr[DelUserNo][0];
buff[1]=UserNoArr[DelUserNo][1];
buff[2]=0;
LcdPrint(buff, 1, 5);
}
}
if(DelUserNo == -1)
{
LcdClear();
LcdPrint("Invalid\n Selection",0,0);
Delay(2);
}
else if(DelUserNo>=0 && DelUserNo<12)
{
DelUserNo = DelUserNo + 2;
if(DeleteUser(DelUserNo) == 1)
{
memset1(buff, 0, sizeof(buff));
LcdClear();
LcdPrint("User Deleted\nUser No:",0,0);
DecToStr(DelUserNo, buff, 2);
LcdPrint(buff, 1, 9);
releaseEElocation(DelUserNo);
Delay(2);
}
else
{
LcdClear();
LcdPrint("Cannot Delete",0,0);
Delay(2);
}
}
else
{
LcdClear();
LcdPrint("Index Out\n of bound",0,0);
Delay(2);
}
}
else
{
LcdClear();
LcdPrint("Admin Not\n  found",0,0);
Delay(2);
return 0;
}
}
}
return 0;
}

# 419
unsigned char menu(const unsigned char *s)
{
unsigned char keyHit=0xFF;
LcdClear();
LcdPrint(s, 0,0);
while(1)
{
KeyScan();
if(IsKeyPending())
{
keyHit = GetKey();
if(keyHit == '1' || keyHit == '2' || keyHit == '3')
return keyHit;
}
}
return 0;
}
void interrupt isr()
{
if(RCIF == 1)
{
PutUartByte(RCREG);
RCIF = 0;
}
}
void main()
{
unsigned char menuResponse=0xFF;

TRISC=0X8F;
LcdInit();
RB5=0;
RB1 = 0;
Delay(1);
LcdPrint("Welcome", 0,0);
Delay(2);
UartInit();

VerifyPswd();




while(1)
{
menuResponse = menu("1 For Access\n2 For Alter User");
if(menuResponse == '1') { ControlAccess();}
else if(menuResponse == '2')
{
while(1)
{
menuResponse = menu("1 Change Admin\n2 Add/Del User");
if(menuResponse == '1')
{
while(1)
{
menuResponse = menu("1 Admin - 00\n2 Admin - 01");
if(menuResponse == '1'){AlterAdminUser(menuResponse);}
else if(menuResponse == '2'){AlterAdminUser(menuResponse);}
else if(menuResponse == '3')break;
}
}
else if(menuResponse == '2')
{
while(1)
{
menuResponse = menu("1 Add New User\n2 Delete Old User");
if(menuResponse == '1'){AddNewUserAfterAdminConfirm();}
else if(menuResponse == '2')
{
while(1)
{
menuResponse = menu("1 Delete All\n2 Delete Single");
if(menuResponse == '1'){EraseAllUsersAfterAdminConfirm();}
else if(menuResponse == '2'){DeleteUserAfterAdminConfirm();}
else if(menuResponse == '3')break;
}
}
else if(menuResponse == '3')break;
}
}
else if(menuResponse == '3')break;
}
}
}
}

